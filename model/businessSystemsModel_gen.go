// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	businessSystemsFieldNames          = builder.RawFieldNames(&BusinessSystems{})
	businessSystemsRows                = strings.Join(businessSystemsFieldNames, ",")
	businessSystemsRowsExpectAutoSet   = strings.Join(stringx.Remove(businessSystemsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	businessSystemsRowsWithPlaceHolder = strings.Join(stringx.Remove(businessSystemsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheBusinessSystemsIdPrefix           = "cache:businessSystems:id:"
	cacheBusinessSystemsApiKeyPrefix       = "cache:businessSystems:apiKey:"
	cacheBusinessSystemsBusinessCodePrefix = "cache:businessSystems:businessCode:"
)

type (
	businessSystemsModel interface {
		Insert(ctx context.Context, data *BusinessSystems) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BusinessSystems, error)
		FindOneByApiKey(ctx context.Context, apiKey string) (*BusinessSystems, error)
		FindOneByBusinessCode(ctx context.Context, businessCode string) (*BusinessSystems, error)
		Update(ctx context.Context, data *BusinessSystems) error
		Delete(ctx context.Context, id int64) error
	}

	defaultBusinessSystemsModel struct {
		sqlc.CachedConn
		table string
	}

	BusinessSystems struct {
		Id           int64          `db:"id"`            // 主键ID，自增
		BusinessCode string         `db:"business_code"` // 业务系统唯一标识码，如：user-service、order-service
		BusinessName string         `db:"business_name"` // 业务系统名称，如：用户服务、订单服务
		ApiKey       string         `db:"api_key"`       // API访问密钥，用于系统认证
		ApiSecret    string         `db:"api_secret"`    // API密钥对应的秘钥，加密存储
		RateLimit    int64          `db:"rate_limit"`    // 速率限制，每分钟最大请求数
		Status       int64          `db:"status"`        // 系统状态：0-禁用，1-启用，2-维护中
		Description  sql.NullString `db:"description"`   // 业务系统描述信息
		ContactInfo  sql.NullString `db:"contact_info"`  // 联系人信息，JSON格式存储
		CreatedAt    time.Time      `db:"created_at"`    // 创建时间
		UpdatedAt    time.Time      `db:"updated_at"`    // 更新时间
	}
)

func newBusinessSystemsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultBusinessSystemsModel {
	return &defaultBusinessSystemsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`business_systems`",
	}
}

func (m *defaultBusinessSystemsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	businessSystemsApiKeyKey := fmt.Sprintf("%s%v", cacheBusinessSystemsApiKeyPrefix, data.ApiKey)
	businessSystemsBusinessCodeKey := fmt.Sprintf("%s%v", cacheBusinessSystemsBusinessCodePrefix, data.BusinessCode)
	businessSystemsIdKey := fmt.Sprintf("%s%v", cacheBusinessSystemsIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, businessSystemsApiKeyKey, businessSystemsBusinessCodeKey, businessSystemsIdKey)
	return err
}

func (m *defaultBusinessSystemsModel) FindOne(ctx context.Context, id int64) (*BusinessSystems, error) {
	businessSystemsIdKey := fmt.Sprintf("%s%v", cacheBusinessSystemsIdPrefix, id)
	var resp BusinessSystems
	err := m.QueryRowCtx(ctx, &resp, businessSystemsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", businessSystemsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBusinessSystemsModel) FindOneByApiKey(ctx context.Context, apiKey string) (*BusinessSystems, error) {
	businessSystemsApiKeyKey := fmt.Sprintf("%s%v", cacheBusinessSystemsApiKeyPrefix, apiKey)
	var resp BusinessSystems
	err := m.QueryRowIndexCtx(ctx, &resp, businessSystemsApiKeyKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `api_key` = ? limit 1", businessSystemsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, apiKey); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBusinessSystemsModel) FindOneByBusinessCode(ctx context.Context, businessCode string) (*BusinessSystems, error) {
	businessSystemsBusinessCodeKey := fmt.Sprintf("%s%v", cacheBusinessSystemsBusinessCodePrefix, businessCode)
	var resp BusinessSystems
	err := m.QueryRowIndexCtx(ctx, &resp, businessSystemsBusinessCodeKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `business_code` = ? limit 1", businessSystemsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, businessCode); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBusinessSystemsModel) Insert(ctx context.Context, data *BusinessSystems) (sql.Result, error) {
	businessSystemsApiKeyKey := fmt.Sprintf("%s%v", cacheBusinessSystemsApiKeyPrefix, data.ApiKey)
	businessSystemsBusinessCodeKey := fmt.Sprintf("%s%v", cacheBusinessSystemsBusinessCodePrefix, data.BusinessCode)
	businessSystemsIdKey := fmt.Sprintf("%s%v", cacheBusinessSystemsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, businessSystemsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.BusinessCode, data.BusinessName, data.ApiKey, data.ApiSecret, data.RateLimit, data.Status, data.Description, data.ContactInfo)
	}, businessSystemsApiKeyKey, businessSystemsBusinessCodeKey, businessSystemsIdKey)
	return ret, err
}

func (m *defaultBusinessSystemsModel) Update(ctx context.Context, newData *BusinessSystems) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	businessSystemsApiKeyKey := fmt.Sprintf("%s%v", cacheBusinessSystemsApiKeyPrefix, data.ApiKey)
	businessSystemsBusinessCodeKey := fmt.Sprintf("%s%v", cacheBusinessSystemsBusinessCodePrefix, data.BusinessCode)
	businessSystemsIdKey := fmt.Sprintf("%s%v", cacheBusinessSystemsIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, businessSystemsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.BusinessCode, newData.BusinessName, newData.ApiKey, newData.ApiSecret, newData.RateLimit, newData.Status, newData.Description, newData.ContactInfo, newData.Id)
	}, businessSystemsApiKeyKey, businessSystemsBusinessCodeKey, businessSystemsIdKey)
	return err
}

func (m *defaultBusinessSystemsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheBusinessSystemsIdPrefix, primary)
}

func (m *defaultBusinessSystemsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", businessSystemsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBusinessSystemsModel) tableName() string {
	return m.table
}
