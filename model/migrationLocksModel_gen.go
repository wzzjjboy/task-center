// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	migrationLocksFieldNames          = builder.RawFieldNames(&MigrationLocks{})
	migrationLocksRows                = strings.Join(migrationLocksFieldNames, ",")
	migrationLocksRowsExpectAutoSet   = strings.Join(stringx.Remove(migrationLocksFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	migrationLocksRowsWithPlaceHolder = strings.Join(stringx.Remove(migrationLocksFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMigrationLocksIdPrefix       = "cache:migrationLocks:id:"
	cacheMigrationLocksLockNamePrefix = "cache:migrationLocks:lockName:"
)

type (
	migrationLocksModel interface {
		Insert(ctx context.Context, data *MigrationLocks) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*MigrationLocks, error)
		FindOneByLockName(ctx context.Context, lockName string) (*MigrationLocks, error)
		Update(ctx context.Context, data *MigrationLocks) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMigrationLocksModel struct {
		sqlc.CachedConn
		table string
	}

	MigrationLocks struct {
		Id        int64     `db:"id"`         // 主键ID
		LockName  string    `db:"lock_name"`  // 锁名称
		LockedBy  string    `db:"locked_by"`  // 持有锁的进程标识
		LockedAt  time.Time `db:"locked_at"`  // 加锁时间
		ExpiresAt time.Time `db:"expires_at"` // 锁过期时间
	}
)

func newMigrationLocksModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultMigrationLocksModel {
	return &defaultMigrationLocksModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`migration_locks`",
	}
}

func (m *defaultMigrationLocksModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	migrationLocksIdKey := fmt.Sprintf("%s%v", cacheMigrationLocksIdPrefix, id)
	migrationLocksLockNameKey := fmt.Sprintf("%s%v", cacheMigrationLocksLockNamePrefix, data.LockName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, migrationLocksIdKey, migrationLocksLockNameKey)
	return err
}

func (m *defaultMigrationLocksModel) FindOne(ctx context.Context, id int64) (*MigrationLocks, error) {
	migrationLocksIdKey := fmt.Sprintf("%s%v", cacheMigrationLocksIdPrefix, id)
	var resp MigrationLocks
	err := m.QueryRowCtx(ctx, &resp, migrationLocksIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", migrationLocksRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMigrationLocksModel) FindOneByLockName(ctx context.Context, lockName string) (*MigrationLocks, error) {
	migrationLocksLockNameKey := fmt.Sprintf("%s%v", cacheMigrationLocksLockNamePrefix, lockName)
	var resp MigrationLocks
	err := m.QueryRowIndexCtx(ctx, &resp, migrationLocksLockNameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `lock_name` = ? limit 1", migrationLocksRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, lockName); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMigrationLocksModel) Insert(ctx context.Context, data *MigrationLocks) (sql.Result, error) {
	migrationLocksIdKey := fmt.Sprintf("%s%v", cacheMigrationLocksIdPrefix, data.Id)
	migrationLocksLockNameKey := fmt.Sprintf("%s%v", cacheMigrationLocksLockNamePrefix, data.LockName)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, migrationLocksRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.LockName, data.LockedBy, data.LockedAt, data.ExpiresAt)
	}, migrationLocksIdKey, migrationLocksLockNameKey)
	return ret, err
}

func (m *defaultMigrationLocksModel) Update(ctx context.Context, newData *MigrationLocks) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	migrationLocksIdKey := fmt.Sprintf("%s%v", cacheMigrationLocksIdPrefix, data.Id)
	migrationLocksLockNameKey := fmt.Sprintf("%s%v", cacheMigrationLocksLockNamePrefix, data.LockName)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, migrationLocksRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.LockName, newData.LockedBy, newData.LockedAt, newData.ExpiresAt, newData.Id)
	}, migrationLocksIdKey, migrationLocksLockNameKey)
	return err
}

func (m *defaultMigrationLocksModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMigrationLocksIdPrefix, primary)
}

func (m *defaultMigrationLocksModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", migrationLocksRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMigrationLocksModel) tableName() string {
	return m.table
}
