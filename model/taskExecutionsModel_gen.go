// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	taskExecutionsFieldNames          = builder.RawFieldNames(&TaskExecutions{})
	taskExecutionsRows                = strings.Join(taskExecutionsFieldNames, ",")
	taskExecutionsRowsExpectAutoSet   = strings.Join(stringx.Remove(taskExecutionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	taskExecutionsRowsWithPlaceHolder = strings.Join(stringx.Remove(taskExecutionsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTaskExecutionsIdPrefix = "cache:taskExecutions:id:"
)

type (
	taskExecutionsModel interface {
		Insert(ctx context.Context, data *TaskExecutions) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TaskExecutions, error)
		Update(ctx context.Context, data *TaskExecutions) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTaskExecutionsModel struct {
		sqlc.CachedConn
		table string
	}

	TaskExecutions struct {
		Id                int64          `db:"id"`                 // 主键ID，自增
		TaskId            int64          `db:"task_id"`            // 任务ID，关联 tasks.id
		ExecutionSequence int64          `db:"execution_sequence"` // 执行序号，从1开始，表示第几次执行
		ExecutionTime     time.Time      `db:"execution_time"`     // 执行开始时间
		Duration          sql.NullInt64  `db:"duration"`           // 执行耗时，单位毫秒
		HttpStatus        sql.NullInt64  `db:"http_status"`        // HTTP响应状态码
		ResponseHeaders   sql.NullString `db:"response_headers"`   // HTTP响应头，JSON格式存储
		ResponseData      sql.NullString `db:"response_data"`      // HTTP响应体数据
		ErrorMessage      sql.NullString `db:"error_message"`      // 执行错误信息
		RetryAfter        sql.NullTime   `db:"retry_after"`        // 下次重试时间
		ExecutionNode     sql.NullString `db:"execution_node"`     // 执行节点标识，用于分布式环境
		TraceId           sql.NullString `db:"trace_id"`           // 链路追踪ID
		CreatedAt         time.Time      `db:"created_at"`         // 记录创建时间
	}
)

func newTaskExecutionsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTaskExecutionsModel {
	return &defaultTaskExecutionsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`task_executions`",
	}
}

func (m *defaultTaskExecutionsModel) Delete(ctx context.Context, id int64) error {
	taskExecutionsIdKey := fmt.Sprintf("%s%v", cacheTaskExecutionsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, taskExecutionsIdKey)
	return err
}

func (m *defaultTaskExecutionsModel) FindOne(ctx context.Context, id int64) (*TaskExecutions, error) {
	taskExecutionsIdKey := fmt.Sprintf("%s%v", cacheTaskExecutionsIdPrefix, id)
	var resp TaskExecutions
	err := m.QueryRowCtx(ctx, &resp, taskExecutionsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", taskExecutionsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskExecutionsModel) Insert(ctx context.Context, data *TaskExecutions) (sql.Result, error) {
	taskExecutionsIdKey := fmt.Sprintf("%s%v", cacheTaskExecutionsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, taskExecutionsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TaskId, data.ExecutionSequence, data.ExecutionTime, data.Duration, data.HttpStatus, data.ResponseHeaders, data.ResponseData, data.ErrorMessage, data.RetryAfter, data.ExecutionNode, data.TraceId)
	}, taskExecutionsIdKey)
	return ret, err
}

func (m *defaultTaskExecutionsModel) Update(ctx context.Context, data *TaskExecutions) error {
	taskExecutionsIdKey := fmt.Sprintf("%s%v", cacheTaskExecutionsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, taskExecutionsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.TaskId, data.ExecutionSequence, data.ExecutionTime, data.Duration, data.HttpStatus, data.ResponseHeaders, data.ResponseData, data.ErrorMessage, data.RetryAfter, data.ExecutionNode, data.TraceId, data.Id)
	}, taskExecutionsIdKey)
	return err
}

func (m *defaultTaskExecutionsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTaskExecutionsIdPrefix, primary)
}

func (m *defaultTaskExecutionsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", taskExecutionsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTaskExecutionsModel) tableName() string {
	return m.table
}
