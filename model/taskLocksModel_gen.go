// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	taskLocksFieldNames          = builder.RawFieldNames(&TaskLocks{})
	taskLocksRows                = strings.Join(taskLocksFieldNames, ",")
	taskLocksRowsExpectAutoSet   = strings.Join(stringx.Remove(taskLocksFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	taskLocksRowsWithPlaceHolder = strings.Join(stringx.Remove(taskLocksFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTaskLocksIdPrefix      = "cache:taskLocks:id:"
	cacheTaskLocksLockKeyPrefix = "cache:taskLocks:lockKey:"
)

type (
	taskLocksModel interface {
		Insert(ctx context.Context, data *TaskLocks) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*TaskLocks, error)
		FindOneByLockKey(ctx context.Context, lockKey string) (*TaskLocks, error)
		Update(ctx context.Context, data *TaskLocks) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTaskLocksModel struct {
		sqlc.CachedConn
		table string
	}

	TaskLocks struct {
		Id        int64     `db:"id"`         // 主键ID，自增
		TaskId    int64     `db:"task_id"`    // 任务ID，关联 tasks.id
		LockKey   string    `db:"lock_key"`   // 锁的唯一标识
		NodeId    string    `db:"node_id"`    // 持有锁的节点ID
		LockedAt  time.Time `db:"locked_at"`  // 加锁时间
		ExpiresAt time.Time `db:"expires_at"` // 锁过期时间
		Version   int64     `db:"version"`    // 版本号，用于乐观锁
	}
)

func newTaskLocksModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTaskLocksModel {
	return &defaultTaskLocksModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`task_locks`",
	}
}

func (m *defaultTaskLocksModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	taskLocksIdKey := fmt.Sprintf("%s%v", cacheTaskLocksIdPrefix, id)
	taskLocksLockKeyKey := fmt.Sprintf("%s%v", cacheTaskLocksLockKeyPrefix, data.LockKey)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, taskLocksIdKey, taskLocksLockKeyKey)
	return err
}

func (m *defaultTaskLocksModel) FindOne(ctx context.Context, id int64) (*TaskLocks, error) {
	taskLocksIdKey := fmt.Sprintf("%s%v", cacheTaskLocksIdPrefix, id)
	var resp TaskLocks
	err := m.QueryRowCtx(ctx, &resp, taskLocksIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", taskLocksRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskLocksModel) FindOneByLockKey(ctx context.Context, lockKey string) (*TaskLocks, error) {
	taskLocksLockKeyKey := fmt.Sprintf("%s%v", cacheTaskLocksLockKeyPrefix, lockKey)
	var resp TaskLocks
	err := m.QueryRowIndexCtx(ctx, &resp, taskLocksLockKeyKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `lock_key` = ? limit 1", taskLocksRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, lockKey); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTaskLocksModel) Insert(ctx context.Context, data *TaskLocks) (sql.Result, error) {
	taskLocksIdKey := fmt.Sprintf("%s%v", cacheTaskLocksIdPrefix, data.Id)
	taskLocksLockKeyKey := fmt.Sprintf("%s%v", cacheTaskLocksLockKeyPrefix, data.LockKey)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, taskLocksRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.TaskId, data.LockKey, data.NodeId, data.LockedAt, data.ExpiresAt, data.Version)
	}, taskLocksIdKey, taskLocksLockKeyKey)
	return ret, err
}

func (m *defaultTaskLocksModel) Update(ctx context.Context, newData *TaskLocks) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	taskLocksIdKey := fmt.Sprintf("%s%v", cacheTaskLocksIdPrefix, data.Id)
	taskLocksLockKeyKey := fmt.Sprintf("%s%v", cacheTaskLocksLockKeyPrefix, data.LockKey)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, taskLocksRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.TaskId, newData.LockKey, newData.NodeId, newData.LockedAt, newData.ExpiresAt, newData.Version, newData.Id)
	}, taskLocksIdKey, taskLocksLockKeyKey)
	return err
}

func (m *defaultTaskLocksModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTaskLocksIdPrefix, primary)
}

func (m *defaultTaskLocksModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", taskLocksRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTaskLocksModel) tableName() string {
	return m.table
}
