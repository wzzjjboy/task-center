// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	migrationsFieldNames          = builder.RawFieldNames(&Migrations{})
	migrationsRows                = strings.Join(migrationsFieldNames, ",")
	migrationsRowsExpectAutoSet   = strings.Join(stringx.Remove(migrationsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	migrationsRowsWithPlaceHolder = strings.Join(stringx.Remove(migrationsFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheMigrationsIdPrefix       = "cache:migrations:id:"
	cacheMigrationsFilenamePrefix = "cache:migrations:filename:"
	cacheMigrationsVersionPrefix  = "cache:migrations:version:"
)

type (
	migrationsModel interface {
		Insert(ctx context.Context, data *Migrations) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Migrations, error)
		FindOneByFilename(ctx context.Context, filename string) (*Migrations, error)
		FindOneByVersion(ctx context.Context, version string) (*Migrations, error)
		Update(ctx context.Context, data *Migrations) error
		Delete(ctx context.Context, id int64) error
	}

	defaultMigrationsModel struct {
		sqlc.CachedConn
		table string
	}

	Migrations struct {
		Id                int64          `db:"id"`                 // 主键ID，自增
		Version           string         `db:"version"`            // 迁移版本号，格式：001、002、003
		Name              string         `db:"name"`               // 迁移名称，描述本次迁移的内容
		Filename          string         `db:"filename"`           // 迁移文件名
		Checksum          string         `db:"checksum"`           // 迁移文件内容的SHA256校验和
		AppliedAt         time.Time      `db:"applied_at"`         // 迁移执行时间
		ExecutionTime     sql.NullInt64  `db:"execution_time"`     // 迁移执行耗时，单位毫秒
		Status            string         `db:"status"`             // 迁移状态
		ErrorMessage      sql.NullString `db:"error_message"`      // 错误信息（如果迁移失败）
		RollbackAvailable int64          `db:"rollback_available"` // 是否支持回滚：1-是，0-否
		CreatedAt         time.Time      `db:"created_at"`         // 记录创建时间
		UpdatedAt         time.Time      `db:"updated_at"`         // 记录更新时间
	}
)

func newMigrationsModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultMigrationsModel {
	return &defaultMigrationsModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`migrations`",
	}
}

func (m *defaultMigrationsModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	migrationsFilenameKey := fmt.Sprintf("%s%v", cacheMigrationsFilenamePrefix, data.Filename)
	migrationsIdKey := fmt.Sprintf("%s%v", cacheMigrationsIdPrefix, id)
	migrationsVersionKey := fmt.Sprintf("%s%v", cacheMigrationsVersionPrefix, data.Version)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, migrationsFilenameKey, migrationsIdKey, migrationsVersionKey)
	return err
}

func (m *defaultMigrationsModel) FindOne(ctx context.Context, id int64) (*Migrations, error) {
	migrationsIdKey := fmt.Sprintf("%s%v", cacheMigrationsIdPrefix, id)
	var resp Migrations
	err := m.QueryRowCtx(ctx, &resp, migrationsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", migrationsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMigrationsModel) FindOneByFilename(ctx context.Context, filename string) (*Migrations, error) {
	migrationsFilenameKey := fmt.Sprintf("%s%v", cacheMigrationsFilenamePrefix, filename)
	var resp Migrations
	err := m.QueryRowIndexCtx(ctx, &resp, migrationsFilenameKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `filename` = ? limit 1", migrationsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, filename); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMigrationsModel) FindOneByVersion(ctx context.Context, version string) (*Migrations, error) {
	migrationsVersionKey := fmt.Sprintf("%s%v", cacheMigrationsVersionPrefix, version)
	var resp Migrations
	err := m.QueryRowIndexCtx(ctx, &resp, migrationsVersionKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `version` = ? limit 1", migrationsRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, version); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMigrationsModel) Insert(ctx context.Context, data *Migrations) (sql.Result, error) {
	migrationsFilenameKey := fmt.Sprintf("%s%v", cacheMigrationsFilenamePrefix, data.Filename)
	migrationsIdKey := fmt.Sprintf("%s%v", cacheMigrationsIdPrefix, data.Id)
	migrationsVersionKey := fmt.Sprintf("%s%v", cacheMigrationsVersionPrefix, data.Version)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, migrationsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Version, data.Name, data.Filename, data.Checksum, data.AppliedAt, data.ExecutionTime, data.Status, data.ErrorMessage, data.RollbackAvailable)
	}, migrationsFilenameKey, migrationsIdKey, migrationsVersionKey)
	return ret, err
}

func (m *defaultMigrationsModel) Update(ctx context.Context, newData *Migrations) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	migrationsFilenameKey := fmt.Sprintf("%s%v", cacheMigrationsFilenamePrefix, data.Filename)
	migrationsIdKey := fmt.Sprintf("%s%v", cacheMigrationsIdPrefix, data.Id)
	migrationsVersionKey := fmt.Sprintf("%s%v", cacheMigrationsVersionPrefix, data.Version)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, migrationsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.Version, newData.Name, newData.Filename, newData.Checksum, newData.AppliedAt, newData.ExecutionTime, newData.Status, newData.ErrorMessage, newData.RollbackAvailable, newData.Id)
	}, migrationsFilenameKey, migrationsIdKey, migrationsVersionKey)
	return err
}

func (m *defaultMigrationsModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheMigrationsIdPrefix, primary)
}

func (m *defaultMigrationsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", migrationsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultMigrationsModel) tableName() string {
	return m.table
}
