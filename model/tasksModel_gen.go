// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	tasksFieldNames          = builder.RawFieldNames(&Tasks{})
	tasksRows                = strings.Join(tasksFieldNames, ",")
	tasksRowsExpectAutoSet   = strings.Join(stringx.Remove(tasksFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	tasksRowsWithPlaceHolder = strings.Join(stringx.Remove(tasksFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheTasksIdPrefix                         = "cache:tasks:id:"
	cacheTasksBusinessIdBusinessUniqueIdPrefix = "cache:tasks:businessId:businessUniqueId:"
)

type (
	tasksModel interface {
		Insert(ctx context.Context, data *Tasks) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Tasks, error)
		FindOneByBusinessIdBusinessUniqueId(ctx context.Context, businessId int64, businessUniqueId string) (*Tasks, error)
		Update(ctx context.Context, data *Tasks) error
		Delete(ctx context.Context, id int64) error
	}

	defaultTasksModel struct {
		sqlc.CachedConn
		table string
	}

	Tasks struct {
		Id               int64          `db:"id"`                 // 主键ID，自增
		BusinessId       int64          `db:"business_id"`        // 业务系统ID，关联 business_systems.id
		BusinessUniqueId string         `db:"business_unique_id"` // 业务系统内的唯一ID，由业务方定义
		CallbackUrl      string         `db:"callback_url"`       // 回调地址，任务执行时的HTTP回调URL
		CallbackMethod   string         `db:"callback_method"`    // HTTP回调方法：GET、POST、PUT、DELETE等
		CallbackHeaders  sql.NullString `db:"callback_headers"`   // 回调请求头，JSON格式存储
		CallbackBody     sql.NullString `db:"callback_body"`      // 回调请求体，支持模板变量
		RetryIntervals   string         `db:"retry_intervals"`    // 重试间隔配置，JSON数组，单位秒，如：[60,300,900]
		MaxRetries       int64          `db:"max_retries"`        // 最大重试次数
		CurrentRetry     int64          `db:"current_retry"`      // 当前重试次数
		Status           int64          `db:"status"`             // 任务状态：0-待执行，1-执行中，2-成功，3-失败，4-取消，5-过期
		Priority         int64          `db:"priority"`           // 任务优先级，1-9，数字越小优先级越高
		Tags             sql.NullString `db:"tags"`               // 任务标签，JSON数组格式，用于分类和查询
		Timeout          int64          `db:"timeout"`            // 任务超时时间，单位秒
		ScheduledAt      time.Time      `db:"scheduled_at"`       // 计划执行时间
		NextExecuteAt    sql.NullTime   `db:"next_execute_at"`    // 下次执行时间，用于延时和重试
		ExecutedAt       sql.NullTime   `db:"executed_at"`        // 实际执行时间
		CompletedAt      sql.NullTime   `db:"completed_at"`       // 完成时间
		ErrorMessage     sql.NullString `db:"error_message"`      // 最新的错误信息
		Metadata         sql.NullString `db:"metadata"`           // 扩展元数据，JSON格式存储
		CreatedAt        time.Time      `db:"created_at"`         // 创建时间
		UpdatedAt        time.Time      `db:"updated_at"`         // 更新时间
	}
)

func newTasksModel(conn sqlx.SqlConn, c cache.CacheConf, opts ...cache.Option) *defaultTasksModel {
	return &defaultTasksModel{
		CachedConn: sqlc.NewConn(conn, c, opts...),
		table:      "`tasks`",
	}
}

func (m *defaultTasksModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	tasksBusinessIdBusinessUniqueIdKey := fmt.Sprintf("%s%v:%v", cacheTasksBusinessIdBusinessUniqueIdPrefix, data.BusinessId, data.BusinessUniqueId)
	tasksIdKey := fmt.Sprintf("%s%v", cacheTasksIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, tasksBusinessIdBusinessUniqueIdKey, tasksIdKey)
	return err
}

func (m *defaultTasksModel) FindOne(ctx context.Context, id int64) (*Tasks, error) {
	tasksIdKey := fmt.Sprintf("%s%v", cacheTasksIdPrefix, id)
	var resp Tasks
	err := m.QueryRowCtx(ctx, &resp, tasksIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tasksRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTasksModel) FindOneByBusinessIdBusinessUniqueId(ctx context.Context, businessId int64, businessUniqueId string) (*Tasks, error) {
	tasksBusinessIdBusinessUniqueIdKey := fmt.Sprintf("%s%v:%v", cacheTasksBusinessIdBusinessUniqueIdPrefix, businessId, businessUniqueId)
	var resp Tasks
	err := m.QueryRowIndexCtx(ctx, &resp, tasksBusinessIdBusinessUniqueIdKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `business_id` = ? and `business_unique_id` = ? limit 1", tasksRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, businessId, businessUniqueId); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultTasksModel) Insert(ctx context.Context, data *Tasks) (sql.Result, error) {
	tasksBusinessIdBusinessUniqueIdKey := fmt.Sprintf("%s%v:%v", cacheTasksBusinessIdBusinessUniqueIdPrefix, data.BusinessId, data.BusinessUniqueId)
	tasksIdKey := fmt.Sprintf("%s%v", cacheTasksIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, tasksRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.BusinessId, data.BusinessUniqueId, data.CallbackUrl, data.CallbackMethod, data.CallbackHeaders, data.CallbackBody, data.RetryIntervals, data.MaxRetries, data.CurrentRetry, data.Status, data.Priority, data.Tags, data.Timeout, data.ScheduledAt, data.NextExecuteAt, data.ExecutedAt, data.CompletedAt, data.ErrorMessage, data.Metadata)
	}, tasksBusinessIdBusinessUniqueIdKey, tasksIdKey)
	return ret, err
}

func (m *defaultTasksModel) Update(ctx context.Context, newData *Tasks) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	tasksBusinessIdBusinessUniqueIdKey := fmt.Sprintf("%s%v:%v", cacheTasksBusinessIdBusinessUniqueIdPrefix, data.BusinessId, data.BusinessUniqueId)
	tasksIdKey := fmt.Sprintf("%s%v", cacheTasksIdPrefix, data.Id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, tasksRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.BusinessId, newData.BusinessUniqueId, newData.CallbackUrl, newData.CallbackMethod, newData.CallbackHeaders, newData.CallbackBody, newData.RetryIntervals, newData.MaxRetries, newData.CurrentRetry, newData.Status, newData.Priority, newData.Tags, newData.Timeout, newData.ScheduledAt, newData.NextExecuteAt, newData.ExecutedAt, newData.CompletedAt, newData.ErrorMessage, newData.Metadata, newData.Id)
	}, tasksBusinessIdBusinessUniqueIdKey, tasksIdKey)
	return err
}

func (m *defaultTasksModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheTasksIdPrefix, primary)
}

func (m *defaultTasksModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", tasksRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultTasksModel) tableName() string {
	return m.table
}
